//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "SSSource.h"

namespace queueing {

Define_Module(SSSource);

Oframe * SSSource::generateTimeslot(){
    frm = new Oframe();
    frm->setKind(0);
    frm->setByteLength(1500);
    frm->setName("Timeslot");
    frm->setTimeslotIndex(this->timeslotIndex);
    frm->setFrameIndex(this->frameIndex);
    SSSource::increaseTimeslotIndex();
    return frm;

}

P3DModuleCont * SSSource::genrateModuleCont(){
    P3DModuleCont * Mod = new P3DModuleCont();
    return Mod;
}

void SSSource::initialize()
{
    this->timeslotIndex=0;
    this->frameIndex=0;
    SSSourceEvent = new cMessage();
    SSSourceEvent->setKind(1);
    SSSourceEvent->setName("SourceEvent");
    scheduleAt(1, SSSourceEvent);
}

void SSSource::handleMessage(cMessage *msg)
{
    if (msg->getKind()==3)
    {
        P3DBroadcastParameter * BP = check_and_cast<P3DBroadcastParameter *>(msg);
        this->numberOfTimeslots = BP->getNumberOfTimeslots();
        this->numberOfFrames = BP->getNumberOfFrames();
        this->numberOfJobs = this->numberOfTimeslots * this->numberOfFrames;
        delete msg;

        P3DModuleCont *osourceCont = P3DSource::genrateModuleCont();
        osourceCont->setModuleID(this->getId());
        osourceCont->setModuleName(this->getName());
        osourceCont->setModuleType(0);
        osourceCont->setKind(2);
        send(osourceCont,"control$o");




    }
    else if (msg->getKind()==1 && (this->frameIndex < this->numberOfFrames && this->timeslotIndex < this->numberOfTimeslots))
    {
        scheduleAt(simTime()+1, P3DSourceEvent);
        P3DTimeslot *TS = generateTimeslot();
        send (TS,"dataOut");

    }
    else
    {
        delete msg;
    }
}

void SSSource::increaseTimeslotIndex() {

    this->timeslotIndex++;
    if (timeslotIndex >= numberOfTimeslots)
    {
        this->frameIndex++;
        this->timeslotIndex = 0;
    }
}

} //namespace
