//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include "SSController.h"

namespace queueing {

Define_Module(SSController);

void SSController::initialize()
{
    this->numberOfTimeslots=par("numberOfTimeslotsP");
    this->numberOfFrames=par("numberOfFramesP");
    this->timeslotSize=1500; // 1500 byte
    this->dataRate = 12500000000; //100 Gps -> Byte/sec
    this->timeslotDuration = timeslotSize/dataRate;
    this->guardTime = this->timeslotDuration*.1;        //10% from timeslot duration
    this->frameCounter = 0;
    this->timeslotCounter = 0;
    this->evenTimeslotAssignment = par ("switchingAssignmentEven");
    this->oddTimeslotAssignment = par("switchingAssignmentOdd");
    P3DControllerEvent = new cMessage();
    P3DControllerEvent->setKind(1);
    SSController::broadcastParameter();

        const int numTS = this->numberOfTimeslots;
        const int numSWinPath =6;
        pathNames  = new string *[numTS];
        for (int i=0;i<numTS;i++)
            {
            pathNames[i]=new string [numSWinPath];
            }
                           // Deley 0 and 1
                           pathNames [0][0]="ssSplitter0";
                           pathNames [0][1]="ssSplitter1";
                           pathNames [0][2]="ssSplitter3";
                           pathNames [0][3]="ssCombiner3";
                           pathNames [0][4]="ssCombiner1";
                           pathNames [0][5]="ssCombiner0";

                           // Deley 2 and 3
                           pathNames [1][0]="ssSplitter0";
                           pathNames [1][1]="ssSplitter1";
                           pathNames [1][2]="ssSplitter4";
                           pathNames [1][3]="ssCombiner4";
                           pathNames [1][4]="ssCombiner1";
                           pathNames [1][5]="ssCombiner0";

                           // Deley 4 and 5
                           pathNames [2][0]="ssSplitter0";
                           pathNames [2][1]="ssSplitter2";
                           pathNames [2][2]="ssSplitter5";
                           pathNames [2][3]="ssCombiner5";
                           pathNames [2][4]="ssCombiner2";
                           pathNames [2][5]="ssCombiner0";

                           // Deley 6 and 7
                           pathNames [3][0]="ssSplitter0";
                           pathNames [3][1]="ssSplitter2";
                           pathNames [3][2]="ssSplitter6";
                           pathNames [3][3]="ssCombiner6";
                           pathNames [3][4]="ssCombiner2";
                           pathNames [3][5]="ssCombiner0";

    SSController::setDelayMatrix();
    scheduleAt(1+this->guardTime, P3DControllerEvent);
}

void SSController::handleMessage(cMessage *msg)
{
    if (msg->getKind()==1) // events
    {
        if(this->frameCounter < this->numberOfFrames && this->timeslotCounter < this->numberOfTimeslots)
        {
        int inTS;
        int outTS;
        int pathIndex;
        int PathNamesIndex;
        int delay;
        int SWAssingment;

       inTS = this->timeslotCounter;

       if(this->frameCounter%2==0)
       {
           SWAssingment = this->evenTimeslotAssignment;
       }
       else
       {
           SWAssingment = this->oddTimeslotAssignment;

       }

       outTS = SSController::getOutputTimeslot(SWAssingment+1, inTS+1);
       EV<<"Current Timeslot @ Controller is . . . "<< inTS<<endl;
       EV<<"Current Frame @ Controller is . . . "<< this->frameCounter<<endl;
       EV<<"output switching for TS "<< inTS<< "is . . ."<<outTS<<endl;
       delay = SSController::computeDelay(inTS,outTS);
       EV<<"required delay for switching TS "<< inTS<< " to "<<outTS<< " is . . . "<<delay<<endl;
       this->timeslotCounter++;
       if (this->timeslotCounter >= numberOfTimeslots)
       {
           this->frameCounter++;
           this->timeslotCounter = 0;
       }
       pathIndex= delay/2;
       SSController::reservePath(pathIndex, delay);
       /*Ocontroller::reserveOFDLStage(PathNamesIndex,delay);
       //Ocontroller::sendSwitchingCont(PathNamesIndex, pathIndex, delay);
       Ocontroller::sendSwitchingCont();

       scheduleAt(simTime()+Ocontroller::getTimeslotDuration(), event);
       Ocontroller::increaseTimeslotCounter();
       this->jobCounter++;

        }
            else
            {
                EV<<"I am here ....1 "<<endl;
                if (Ocontroller::allSWCQEmpty()==false)
                    {
                    EV<<"I am here ....2 "<<endl;
                    Ocontroller::sendSwitchingCont();
                    scheduleAt(simTime()+Ocontroller::getTimeslotDuration(), event);
                    Ocontroller::increaseTimeslotCounter();

                    }
                else
                    {
                    EV<<"I am here ....3 "<<endl;
                    Ocontroller::finish();
                    }


            }*/

        scheduleAt(simTime()+this->timeslotDuration, P3DControllerEvent);
        }
        else{
            cancelAndDelete(P3DControllerEvent);
        }

    }
    if (msg->getKind()==2)
        {
        P3DModuleCont * modCont = check_and_cast<P3DModuleCont *>(msg);
               P3DModuleDB mod;
               switch(modCont->getModuleType())
               {
               case 0:
               {
                   mod.setModuleId(modCont->getModuleID());
                   mod.setModuleName(modCont->getModuleName());
                   mod.setModuleType(modCont->getModuleType());
                   mod.setContOutputPortId(modCont->getArrivalGateId());
                   sourceSinkList.push_back(mod);
                   delete msg;
                   bubble ("Source added");
               }
                   break;
               case 1:
               {
                   mod.setModuleId(modCont->getModuleID());
                   mod.setModuleName(modCont->getModuleName());
                   mod.setModuleType(modCont->getModuleType());
                   mod.setContOutputPortId(modCont->getArrivalGateId());
                   sourceSinkList.push_back(mod);
                   delete msg;
                   bubble ("Sink added");
               }
                   break;
               case 2:
               {
                   mod.setModuleId(modCont->getModuleID());
                   mod.setModuleName(modCont->getModuleName());
                   mod.setModuleType(modCont->getModuleType());
                   mod.setContOutputPortId(modCont->getArrivalGateId());
                   switchesList.push_back(mod);
                   delete msg;
                   bubble ("Splitter added");
               }
                   break;

               case 3:
               {
                   mod.setModuleId(modCont->getModuleID());
                   mod.setModuleName(modCont->getModuleName());
                   mod.setModuleType(modCont->getModuleType());
                   mod.setContOutputPortId(modCont->getArrivalGateId());
                   switchesList.push_back(mod);
                   delete msg;
                   bubble ("Switch added");
               }
                   break;
               case 4:
               {
                   mod.setModuleId(modCont->getModuleID());
                   mod.setModuleName(modCont->getModuleName());
                   mod.setModuleType(modCont->getModuleType());
                   mod.setContOutputPortId(modCont->getArrivalGateId());
                   switchesList.push_back(mod);
                   delete msg;
                   bubble ("Combiner added");
               }
                   break;
               }

        }
}

void SSController::broadcastParameter() {

    BC = new P3DBroadcastParameter();
    BC->setKind(3);
    BC->setName("Broadcast");
    BC->setNumberOfTimeslots(this->numberOfTimeslots);
    BC->setNumberOfFrames(this->numberOfFrames);
    BC->setTimeslotDuration(this->timeslotDuration);
    BC->setGuardTime(this->guardTime);


    for (int i=0; i<SSController::gateSize("control$o");i++)
        {
        P3DBroadcastParameter * BCP = BC->dup();
            send(BCP,"control$o",i);
        }
        delete BC;
}

int SSController::getOutputTimeslot(int row, int column)
{
    int result = -1, rowIndex = 0;
    string temp;
    ifstream inFile;

            if(row > 0 && column > 0)
            {
             inFile.open("permutation4.txt");

             for(rowIndex = 0; inFile.good() && rowIndex < row; rowIndex++)
              inFile>>temp;

             inFile.close();

             if(rowIndex>=row && column<=temp.size())
              result = temp.at(column - 1) - '0';
            }

 return result;
}

int SSController::computeDelay(int in, int out)
{
    int delay=0;
    delay = numberOfTimeslots+out-in;
    return delay;
}

void SSController::reservePath(int pathIndex, int delay) {
    list<P3DModuleDB>::iterator itt;
    list<P3DModuleDB>::iterator iStart = switchesList.begin();
    list<P3DModuleDB>::iterator iEnd = switchesList.end();
    string moduleName;
    int queueLegnth;

    for (int i = 0; i< 6; i++)
    {
        moduleName = this->pathNames[pathIndex][i];
        for (itt = iStart ; itt != iEnd ; ++itt)
        {
            if ( itt->getModuleName()==moduleName)
                {
                itt->setBusy(true);
                queueLegnth = itt->getQueueLength();

               if (queueLegnth==0) //Case 1: Switching Control Queue is empty
               {
                   //EV<<"Queue is Empty .. "<<endl;
                   itt->SwitchingContQ.insert(sw);
                   //EV<<"DONE... Inserted to Empty Queue .. Length = "<<itt->SwitchingContQ->getLength()<<endl;
                   //EV<<"//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--//--"<<endl;
               } // end of IfEmpty

               else // Case 2: Switching Control Queue is NOT Empty
               {
                   //EV<<"Queue is NOT Empty .. Length = "<<itt->SwitchingContQ->getLength()<<endl;
                   cQueue::Iterator currentIter =  cQueue::Iterator ( itt->SwitchingContQ, 0);
                   SwitchingCont * SWC = (  SwitchingCont *) currentIter();


                   // case 2.1 Only one Job in Queue
                   if (itt->SwitchingContQ.length()==1)
                   {
                       // Case 2.1.1: Holding Time LESS than Head Of Queue
                       if (sw->getStartHoldingTime() < SWC->getStartHoldingTime())
                       {
                           //EV<<"new SWC is LESS than the head of the Queue"<<endl;
                           itt->SwitchingContQ.insertBefore(currentIter.operator ()(),sw);
                           //EV<<"DONE... Inserted to head of the queue where new SWC (Start Holding Time) ="<< sw->getStartHoldingTime() <<" and head of the Queue ReleaseTime =  "<<SWC->getStartHoldingTime()<<endl;
                           //EV<<"DONE... Inserted to head of the queue where new SWC delay ="<< sw->getDelay() <<" and head of the Queue delay =  "<<SWC->getDelay()<<endl;
                           //EV<<itt->SwitchingContQ->getLength()<<endl;
                           //EV<<"+++++++++++++++++++++++++++++++++++++++++++++++++"<<endl;
                       }

                       // Case 2.1.2 Holding Time GREATER than Head Of Queue and Only One Job in Queue
                       else
                       {
                       //EV<<"new SWC is GREATER than the head of the Queue & only one job in Q"<<endl;
                       itt->SwitchingContQ.insertAfter(currentIter.operator ()(),sw);
                       //EV<<"DONE... Inserted to tail of the queue where new SWC (Start Holding Time) ="<< sw->getStartHoldingTime() <<" and head of the Queue ReleaseTime =  "<<SWC->getStartHoldingTime()<<endl;
                       //EV<<"DONE... Inserted to tail of the queue where new SWC delay ="<< sw->getDelay() <<" and head of the Queue delay =  "<<SWC->getDelay()<<endl;
                       //EV<<itt->SwitchingContQ->getLength()<<endl;
                       //EV<<"--------------------------------------------------------------------------------"<<endl;
                       } // end 2.1.2
                   }
                   // Case 2.2: More Than One Job in Queue
                   else
                   {
                       //cQueue::Iterator currentIter =  cQueue::Iterator (* itt->SwitchingContQ, 0);
                       cQueue::Iterator nextIter =  cQueue::Iterator ( itt->SwitchingContQ, 0);
                       nextIter++;
                       SwitchingCont * SWCN;
                       bool exit = false;


                           SWC = (  SwitchingCont *) currentIter();
                           SWCN = (  SwitchingCont *) nextIter();

                           if (sw->getStartHoldingTime() < SWC->getStartHoldingTime())// && sw->getStartHoldingTime()< SWCN->getStartHoldingTime())
                           {
                               itt->SwitchingContQ.insertBefore(currentIter.operator ()(),sw);
                               exit = true;

                              // EV<<"DONE... Inserted to queue where new SWC (Start Holding Time) = "<< sw->getStartHoldingTime() <<" before   "<<SWC->getStartHoldingTime()<<endl;
                               //EV<<"DONE... Inserted to queue where new SWC delay = "<< sw->getDelay() <<" after  "<<SWC->getDelay()<<endl;
                               //EV<<itt->SwitchingContQ->getLength()<<endl;
                               //EV<<"cccccccccccccccccccccccccccccccccccccccccccccccccccccccccc"<<endl;
                           }
                           else //if (sw->getStartHoldingTime()>SWC->getStartHoldingTime())
                           {
                               do
                               {
                                   SWC = (  SwitchingCont *) currentIter();
                                   SWCN = (  SwitchingCont *) nextIter();
                               if(nextIter.end()==true)
                               {
                               itt->SwitchingContQ.insertAfter(currentIter.operator ()(),sw);
                               exit = true;
                               }
                               else if (sw->getStartHoldingTime()<SWCN->getStartHoldingTime())
                               {
                               itt->SwitchingContQ.insertBefore(nextIter.operator ()(),sw);
                               exit = true;
                               }
                               else
                               {
                                       currentIter++;
                                       nextIter++;
                               }

                               }while (exit == false);
                           }




                   } // end case 2.2
               }// end case 2
           } // end of Module Name True
      } // end of Iterator for
   Ocontroller::printSWCQueue(moduleName);

                }
        }
    }


}

void SSController::setDelayMatrix()
{

    // Building Delay Matrix.
       const int MaximumDelayPlus1 = 8;
       const int numSWPerPath = 6;
       this->commulatedDelayMatrix = new int *[numSWPerPath];


       for (int i=0;i<numSWPerPath;i++)
           commulatedDelayMatrix[i]=new int[MaximumDelayPlus1];

       // Setting up the Splitters columns ( No delay )

       for (int sp=0; sp<3;sp++)
       {
           for (int s=0; s<MaximumDelayPlus1;s++)
               commulatedDelayMatrix[sp][s]=0;
       }

       // Setting up Combiners

       for (int sw=3; sw<numSWPerPath;sw++)
       {
           for (int y=0;y<MaximumDelayPlus1; y++)
                  {
               commulatedDelayMatrix[sw][y] = y;
                   }

                  }//end for






       for (int i=0;i<MaximumDelayPlus1;i++)
           {
                   for (int x = 0; x <numSWPerPath; x++)
                   {

                      EV<<commulatedDelayMatrix[x][i]<<"   ";

                   }
           EV<<endl;
           }
}

void Ocontroller::printSWCQueue(string moduleName)
{
    int counter =0;

    list<ModuleInfo>::iterator itt;
    list<ModuleInfo>::iterator iStart = modules.begin();
    list<ModuleInfo>::iterator iEnd = modules.end();
    for (itt = iStart ; itt != iEnd ; itt++)
       {
            if ( itt->getModuleName()==moduleName)
            {
                cQueue::Iterator currentIter =  cQueue::Iterator ( itt->SwitchingContQ, 0);
                SwitchingCont * SWC;// = (  SwitchingCont *) currentIter();
                EV<<"=============================="<<endl;
                EV<<"Module ( "<<moduleName<<" )"<<endl;
                EV<<"Length = "<<itt->SwitchingContQ.getLength()<<endl;
                EV<<"=============================="<<endl;

                for (currentIter; currentIter.end()==false;currentIter++)
                {
                    SWC = (  SwitchingCont *) currentIter();

                    EV<<"Job # "<<counter+1<<"-----------------"<<endl;
                    EV<<"Start Holding Time  = "<<SWC->getStartHoldingTime()<<endl;
                    EV<<"Switching State     = "<<SWC->getSwitchingState()<<endl;
                    EV<<"Delay               = "<<SWC->getDelay()<<endl;
                    EV<<"Release Time        = "<<SWC->getReleaseTime()<<endl;
                    EV<<"Target Module       = "<<SWC->getTargetModule()<<endl;
                    counter++;
                }

            }
        }
}

} //namespace
