//
// Generated file, do not edit! Created by opp_msgc 4.5 from switchingCont.msg.
//

#ifndef _QUEUEING_SWITCHINGCONT_M_H_
#define _QUEUEING_SWITCHINGCONT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef QUEUEING_API 
#  if defined(QUEUEING_EXPORT)
#    define QUEUEING_API  OPP_DLLEXPORT
#  elif defined(QUEUEING_IMPORT)
#    define QUEUEING_API  OPP_DLLIMPORT
#  else
#    define QUEUEING_API 
#  endif
#endif


namespace queueing {

/**
 * Class generated from <tt>switchingCont.msg</tt> by opp_msgc.
 * <pre>
 * packet SwitchingCont 
 * {
 *     int frameType = 2;
 *     bool switchingState;
 *     simtime_t releaseTime;
 *     simtime_t StartHoldingTime;
 *     int outputPortIndex;
 *     int delay;
 *     string targetModule;
 * 
 * 
 * }
 * </pre>
 */
class QUEUEING_API SwitchingCont : public ::cPacket
{
  protected:
    int frameType_var;
    bool switchingState_var;
    simtime_t releaseTime_var;
    simtime_t StartHoldingTime_var;
    int outputPortIndex_var;
    int delay_var;
    opp_string targetModule_var;

  private:
    void copy(const SwitchingCont& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SwitchingCont&);

  public:
    SwitchingCont(const char *name=NULL, int kind=0);
    SwitchingCont(const SwitchingCont& other);
    virtual ~SwitchingCont();
    SwitchingCont& operator=(const SwitchingCont& other);
    virtual SwitchingCont *dup() const {return new SwitchingCont(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getFrameType() const;
    virtual void setFrameType(int frameType);
    virtual bool getSwitchingState() const;
    virtual void setSwitchingState(bool switchingState);
    virtual simtime_t getReleaseTime() const;
    virtual void setReleaseTime(simtime_t releaseTime);
    virtual simtime_t getStartHoldingTime() const;
    virtual void setStartHoldingTime(simtime_t StartHoldingTime);
    virtual int getOutputPortIndex() const;
    virtual void setOutputPortIndex(int outputPortIndex);
    virtual int getDelay() const;
    virtual void setDelay(int delay);
    virtual const char * getTargetModule() const;
    virtual void setTargetModule(const char * targetModule);
};

inline void doPacking(cCommBuffer *b, SwitchingCont& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SwitchingCont& obj) {obj.parsimUnpack(b);}

}; // end namespace queueing

#endif // _QUEUEING_SWITCHINGCONT_M_H_
