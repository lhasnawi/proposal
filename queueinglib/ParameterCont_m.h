//
// Generated file, do not edit! Created by opp_msgc 4.5 from ParameterCont.msg.
//

#ifndef _QUEUEING_PARAMETERCONT_M_H_
#define _QUEUEING_PARAMETERCONT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// dll export symbol
#ifndef QUEUEING_API 
#  if defined(QUEUEING_EXPORT)
#    define QUEUEING_API  OPP_DLLEXPORT
#  elif defined(QUEUEING_IMPORT)
#    define QUEUEING_API  OPP_DLLIMPORT
#  else
#    define QUEUEING_API 
#  endif
#endif


namespace queueing {

/**
 * Class generated from <tt>ParameterCont.msg</tt> by opp_msgc.
 * <pre>
 * message ParameterCont {
 * 	
 * 	int frameType = 1;
 * 	int numTimeslots;
 * 	int numFrames;
 * 	int timeslotSize;
 * 	double dataRate;
 * 	double timeslotDuration;
 * 	double guardTime;
 * }
 * </pre>
 */
class QUEUEING_API ParameterCont : public ::cMessage
{
  protected:
    int frameType_var;
    int numTimeslots_var;
    int numFrames_var;
    int timeslotSize_var;
    double dataRate_var;
    double timeslotDuration_var;
    double guardTime_var;

  private:
    void copy(const ParameterCont& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ParameterCont&);

  public:
    ParameterCont(const char *name=NULL, int kind=0);
    ParameterCont(const ParameterCont& other);
    virtual ~ParameterCont();
    ParameterCont& operator=(const ParameterCont& other);
    virtual ParameterCont *dup() const {return new ParameterCont(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getFrameType() const;
    virtual void setFrameType(int frameType);
    virtual int getNumTimeslots() const;
    virtual void setNumTimeslots(int numTimeslots);
    virtual int getNumFrames() const;
    virtual void setNumFrames(int numFrames);
    virtual int getTimeslotSize() const;
    virtual void setTimeslotSize(int timeslotSize);
    virtual double getDataRate() const;
    virtual void setDataRate(double dataRate);
    virtual double getTimeslotDuration() const;
    virtual void setTimeslotDuration(double timeslotDuration);
    virtual double getGuardTime() const;
    virtual void setGuardTime(double guardTime);
};

inline void doPacking(cCommBuffer *b, ParameterCont& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ParameterCont& obj) {obj.parsimUnpack(b);}

}; // end namespace queueing

#endif // _QUEUEING_PARAMETERCONT_M_H_
